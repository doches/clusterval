#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),"..","lib")
require 'clusterval'
require 'optparse'

include Clusterval

options = {:clean => false,:map => false}
hack = nil
OptionParser.new do |opts|
  opts.banner = "Usage: clusterval [options]"
  
  opts.on("-g","--gold FILENAME","(required) Load gold clustering from FILENAME") do |file|
    options[:gold] = file
  end
  
  opts.on("-c","--candidate FILENAME", "(required) Load candidate clustering from FILENAME") do |file|
    options[:candidate] = file
  end
  
  opts.on("-s","--strict","Do not allow items to appear in multiple clusters") do 
  	options[:clean] = true
  end
  
  opts.on("-m","--print-map","Print the map of candidate clusters onto their best gold cluster") do
  	options[:map] = true
  end
  
  opts.on_tail("-h","--help","Show this help") do
    puts opts
    exit
  end
  
  hack = opts
end.parse!

if options[:gold].nil? or options[:candidate].nil?
  puts hack
  exit
end

[:gold, :candidate].each do |k| 
	if not File.exists?(options[k])
		STDERR.puts "Input file '#{options[k]}' does not exist."
		exit(1)
	end
end

gold = Clustering.new(options[:gold],options[:clean])
candidate = Clustering.new(options[:candidate],options[:clean])

if options[:map]
	candidate.clusters.each do |candidate_cluster|
		best = nil
		gold.clusters.each do |gold_cluster|
			score = Clustering.f(candidate_cluster,gold_cluster)
			best = [gold_cluster,score] if (best.nil? or score > best[1] and not score.nan?)
		end
		puts "#{candidate_cluster.label} -> #{best[0].label} (#{best[1]})"
	end
end

puts candidate.F_score(gold)
